GASERA_COMMANDS = {
# --- Measurement ---
    "get_status": {
        "section": "Measurement",
        "title": "Get Status",
        "description": "Get current device status",
        "help": "Check current device state.",
        "style": "info",
        "args": [],
        "tags": ['status'],
        "requires": "",
        "cooldown": 2,
        "auto": False,
        "mock": "",
        "output_id": "get_status_output",
        "handler": lambda g, a: g.get_device_status()
    },
    "get_tasks": {
        "section": "Measurement",
        "title": "Get Tasks",
        "description": "Get available task list",
        "help": "Fetch all task configurations.",
        "style": "primary",
        "args": [],
        "tags": ['task'],
        "requires": "",
        "cooldown": 10,
        "auto": False,
        "mock": "",
        "output_id": "get_tasks_output",
        "handler": lambda g, a: g.get_task_list()
    },
    "start_measurement": {
        "section": "Measurement",
        "title": "Start by ID",
        "description": "Start measurement by task ID",
        "help": "Provide numeric task ID (e.g., 11) or leave empty for default to begin.",
        "style": "success",
        "args": ['task_id'],
        "tags": ['measurement'],
        "requires": "",
        "cooldown": 0,
        "auto": False,
        "mock": "Started measurement ID",
        "output_id": "start_measurement_output",
        "handler": lambda g, a: g.start_measurement(a[0])
    },
    "start_measurement_by_name": {
        "section": "Measurement",
        "title": "Start by Name",
        "description": "Start measurement by task name",
        "help": "Provide task name or leave empty for default.",
        "style": "success",
        "args": ['task_name'],
        "tags": ['measurement'],
        "requires": "",
        "cooldown": 0,
        "auto": False,
        "mock": "",
        "output_id": "start_measurement_by_name_output",
        "handler": lambda g, a: g.start_measurement_by_name(a[0])
    },
    "stop_measurement": {
        "section": "Measurement",
        "title": "Stop",
        "description": "Stop active measurement",
        "help": "Stop any ongoing measurement.",
        "style": "danger",
        "args": [],
        "tags": ['measurement'],
        "requires": "operator",
        "cooldown": 1,
        "auto": False,
        "mock": "Stopped.",
        "output_id": "stop_measurement_output",
        "handler": lambda g, a: g.stop_measurement()
    },
    "get_results": {
        "section": "Measurement",
        "title": "Get Results",
        "description": "Get last measurement results",
        "help": "Returns last result list.",
        "style": "info",
        "args": [],
        "tags": ['result'],
        "requires": "",
        "cooldown": 5,
        "auto": False,
        "mock": "",
        "output_id": "get_results_output",
        "handler": lambda g, a: g.get_last_results()
    },
    "get_phase": {
        "section": "Measurement",
        "title": "Get Phase",
        "description": "Get current measurement phase",
        "help": "Which phase is running?",
        "style": "info",
        "args": [],
        "tags": ['measurement'],
        "requires": "",
        "cooldown": 2,
        "auto": False,
        "mock": "",
        "output_id": "get_phase_output",
        "handler": lambda g, a: g.get_measurement_status()
    },
    "get_iteration": {
        "section": "Measurement",
        "title": "Get Iteration",
        "description": "Get iteration number",
        "help": "Returns internal counter.",
        "style": "secondary",
        "args": [],
        "tags": ['debug'],
        "requires": "",
        "cooldown": 10,
        "auto": False,
        "mock": "",
        "output_id": "get_iteration_output",
        "handler": lambda g, a: g.get_iteration_number()
    },
# --- Network ---
    "get_name": {
        "section": "Network",
        "title": "Get Name",
        "description": "Get device name",
        "help": "Returns configured device name.",
        "style": "secondary",
        "args": [],
        "tags": ['config'],
        "requires": "",
        "cooldown": 60,
        "auto": False,
        "mock": "",
        "output_id": "get_name_output",
        "handler": lambda g, a: g.get_device_name()
    },
    "get_net": {
        "section": "Network",
        "title": "Get Network",
        "description": "Get network settings",
        "help": "Show DHCP/static configuration.",
        "style": "secondary",
        "args": [],
        "tags": ['network'],
        "requires": "",
        "cooldown": 30,
        "auto": False,
        "mock": "",
        "output_id": "get_net_output",
        "handler": lambda g, a: g.get_network_settings()
    },
    "set_net": {
        "section": "Network",
        "title": "Set Network",
        "description": "Set network settings",
        "help": "Args: use_dhcp ip netmask gw",
        "style": "warning",
        "args": ['use_dhcp', 'ip', 'netmask', 'gateway'],
        "tags": ['network'],
        "requires": "admin",
        "cooldown": 0,
        "auto": False,
        "mock": "",
        "output_id": "set_net_output",
        "handler": lambda g, a: g.set_network_settings(int(a[0]), a[1], a[2], a[3])
    },
    "get_time": {
        "section": "Network",
        "title": "Get Time",
        "description": "Get device time",
        "help": "Query RTC clock time.",
        "style": "secondary",
        "args": [],
        "tags": ['time'],
        "requires": "",
        "cooldown": 10,
        "auto": False,
        "mock": "",
        "output_id": "get_time_output",
        "handler": lambda g, a: g.get_device_time()
    },
    "set_online_enabled": {
        "section": "Network",
        "title": "Enable Online",
        "description": "Enable online mode",
        "help": "Puts the device into online operation mode.",
        "style": "success",
        "args": [],
        "tags": ["mode"],
        "requires": "operator",
        "cooldown": 0,
        "auto": False,
        "mock": "Online mode enabled.",
        "output_id": "set_online_output",
        "handler": lambda g, a: g.set_online_mode(True)
    },
    "set_online_disabled": {
        "section": "Network",
        "title": "Disable Online",
        "description": "Disable online mode",
        "help": "Disables online mode; returns to local/manual operation.",
        "style": "outline-danger",
        "args": [],
        "tags": ["mode"],
        "requires": "operator",
        "cooldown": 0,
        "auto": False,
        "mock": "Online mode disabled.",
        "output_id": "set_online_output",
        "handler": lambda g, a: g.set_online_mode(False)
    },
    "reboot": {
        "section": "Network",
        "title": "Reboot",
        "description": "Reboot device",
        "help": "Warm restart device",
        "style": "danger",
        "args": [],
        "tags": ['admin'],
        "requires": "admin",
        "cooldown": 600,
        "auto": False,
        "mock": "Simulated reboot done.",
        "output_id": "reboot_output",
        "handler": lambda g, a: g.reboot_device()
    },
# --- Parameters ---
    "get_param": {
        "section": "Parameters",
        "title": "Get Param",
        "description": "Get system parameter by name",
        "help": "Parameter name required.",
        "style": "info",
        "args": ['param_name'],
        "tags": ['param'],
        "requires": "",
        "cooldown": 0,
        "auto": False,
        "mock": "",
        "output_id": "get_param_output",
        "handler": lambda g, a: g.get_parameter(a[0])
    },
    "set_laser_tune": {
        "section": "Parameters",
        "title": "Set Laser Tune",
        "description": "Set laser tuning interval",
        "help": "Seconds between scans.",
        "style": "warning",
        "args": ['interval_sec'],
        "tags": ['laser'],
        "requires": "admin",
        "cooldown": 0,
        "auto": False,
        "mock": "",
        "output_id": "set_laser_tune_output",
        "handler": lambda g, a: g.set_laser_tuning_interval(int(a[0]))
    },
    "get_task_params": {
        "section": "Parameters",
        "title": "Get Task Params",
        "description": "Get parameters for specific task",
        "help": "Provide task ID.",
        "style": "info",
        "args": ['task_id'],
        "tags": ['task'],
        "requires": "",
        "cooldown": 0,
        "auto": False,
        "mock": "",
        "output_id": "get_task_params_output",
        "handler": lambda g, a: g.get_task_parameters(int(a[0]))
    },
    "get_sys_params": {
        "section": "Parameters",
        "title": "Get System Params",
        "description": "Get system parameters",
        "help": "Device-level settings.",
        "style": "info",
        "args": [],
        "tags": ['param'],
        "requires": "",
        "cooldown": 0,
        "auto": False,
        "mock": "",
        "output_id": "get_sys_params_output",
        "handler": lambda g, a: g.get_system_parameters()
    },
    "get_sampler_params": {
        "section": "Parameters",
        "title": "Get Sampler Params",
        "description": "Get sampler parameters",
        "help": "Sampler config",
        "style": "info",
        "args": [],
        "tags": ['param'],
        "requires": "",
        "cooldown": 0,
        "auto": False,
        "mock": "",
        "output_id": "get_sampler_params_output",
        "handler": lambda g, a: g.get_sampler_parameters()
    },
    "set_component_order": {
        "section": "Parameters",
        "title": "Set Comp. Order",
        "description": "Set CAS component order",
        "help": "Space-separated CAS names",
        "style": "warning",
        "args": ['cas1', 'cas2', '...'],
        "tags": ['config'],
        "requires": "admin",
        "cooldown": 0,
        "auto": False,
        "mock": "",
        "output_id": "set_component_order_output",
        "handler": lambda g, a: g.set_component_order(' '.join(a))
    },
    "set_conc_format": {
        "section": "Parameters",
        "title": "Set Conc Format",
        "description": "Set concentration format",
        "help": "Flags: show_time show_cas show_conc [show_inlet]",
        "style": "warning",
        "args": ['time', 'cas', 'conc', 'inlet'],
        "tags": ['format'],
        "requires": "admin",
        "cooldown": 0,
        "auto": False,
        "mock": "",
        "output_id": "set_conc_format_output",
        "handler": lambda g, a: g.set_concentration_format(int(a[0]), int(a[1]), int(a[2]), int(a[3]) if len(a) > 3 else -1)
    },
# --- System ---
    "get_errors": {
        "section": "System",
        "title": "Get Errors",
        "description": "Retrieve active errors",
        "help": "List any ongoing device errors.",
        "style": "warning",
        "args": [],
        "tags": ['error'],
        "requires": "",
        "cooldown": 5,
        "auto": False,
        "mock": "",
        "output_id": "get_errors_output",
        "handler": lambda g, a: g.get_active_errors()
    },
    "get_device_info": {
        "section": "System",
        "title": "Get Device Info",
        "description": "Get device info",
        "help": "Serial, version etc.",
        "style": "secondary",
        "args": [],
        "tags": ['info'],
        "requires": "",
        "cooldown": 120,
        "auto": False,
        "mock": "",
        "output_id": "get_device_info_output",
        "handler": lambda g, a: g.get_device_info()
    },
    "start_selftest": {
        "section": "System",
        "title": "Start Self-Test",
        "description": "Start self-test routine",
        "help": "Triggers diagnostic test",
        "style": "warning",
        "args": [],
        "tags": ['test'],
        "requires": "admin",
        "cooldown": 300,
        "auto": False,
        "mock": "Test started.",
        "output_id": "start_selftest_output",
        "handler": lambda g, a: g.start_self_test()
    },
    "get_selftest": {
        "section": "System",
        "title": "Get Self-Test",
        "description": "Get self-test result",
        "help": "Returns last test result",
        "style": "info",
        "args": [],
        "tags": ['test'],
        "requires": "",
        "cooldown": 60,
        "auto": False,
        "mock": "",
        "output_id": "get_selftest_output",
        "handler": lambda g, a: g.get_self_test_result()
    }
}